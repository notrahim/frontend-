{"ast":null,"code":"import \"core-js/modules/web.timers.js\";\nimport \"core-js/modules/es.array.index-of.js\";\nimport \"core-js/modules/es.function.name.js\";\nimport \"core-js/modules/es.array.splice.js\";\nexport default {\n  props: ['company'],\n  data: function data() {\n    return {\n      autoUpdate: true,\n      taxes: [],\n      ShowFiscal: true,\n      isUpdating: false,\n      tax_sarl: [{\n        header: 'Impôt sur les sociétés'\n      }, {\n        name: 'Revenu foncier',\n        value: 'Taxe_RevenuFoncier'\n      }, {\n        name: 'Réel simplifié (IS)',\n        value: 'TaxCB_IS_ReelSimplifie'\n      }, {\n        name: 'Réel normal (IS)',\n        value: 'TaxCB_IS_ReelNormal'\n      }, {\n        divider: true\n      }, {\n        header: 'Bénéfices Industriels et Commerciaux'\n      }, {\n        name: 'Réel simplifié (BIC)',\n        value: 'Taxe_CB_BICReelSimplifie'\n      }, {\n        name: 'Réel normal (BIC)',\n        value: 'Taxe_CB_BICReelNormal'\n      }, {\n        divider: true\n      }, {\n        header: 'Bénéfices Non Commerciaux'\n      }, {\n        name: 'Déclaration contrôlée (BNC)',\n        value: 'Taxe_CB_BNCDeclaControle'\n      }, {\n        divider: true\n      }, {\n        header: 'Options particulières'\n      }, {\n        name: \"Assujettissement à l'IS\",\n        value: 'Taxe_CB_OptionParticuliereIS'\n      }, {\n        name: 'Régime des sociétés de personnes',\n        value: 'Taxe_CB_OptionParticuliereRSP'\n      }, {\n        divider: true\n      }, {\n        header: 'Si associé unique'\n      }, {\n        name: 'Spécial BNC (micro)',\n        value: 'TaxCB_SARLAssoUnique_BNC'\n      }, {\n        name: 'Micro BIC',\n        value: 'TaxCB_SARLAssoUnique_MicroBIC'\n      }, {\n        divider: true\n      }, {\n        header: 'TVA'\n      }, {\n        name: 'Franchise en base (TVA)',\n        value: 'TVA_FranchiseBase'\n      }, {\n        name: 'Réel simplifié (TVA)',\n        value: 'TVA_ReelSimplifie'\n      }, {\n        name: 'Mini-réel (TVA)',\n        value: 'TVA_MiniReel'\n      }, {\n        name: 'Réel normal (TVA)',\n        value: 'TVA_ReelNormal'\n      }, {\n        name: 'Opération imposables sur options (TVA)',\n        value: 'Tax_ImposableSurOption'\n      }, {\n        name: 'Déclarations trimestrielles (TVA)',\n        value: 'TVA_DepotTrimestre4k'\n      }, {\n        name: 'Option déclaration annuelle (TVA)',\n        value: ''\n      }]\n    };\n  },\n  watch: {\n    isUpdating: function isUpdating(val) {\n      var _this = this;\n\n      if (val) {\n        setTimeout(function () {\n          return _this.isUpdating = false;\n        }, 3000);\n      }\n    }\n  },\n  computed: {\n    postData: function postData() {\n      var data = {\n        taxes: this.taxes\n      };\n      return data;\n    }\n  },\n  methods: {\n    remove: function remove(item) {\n      var index = this.taxes.indexOf(item.name);\n      if (index >= 0) this.taxes.splice(index, 1);\n    }\n  }\n};","map":{"version":3,"mappings":";;;;AAgDA;EACAA,kBADA;EAEAC,IAFA,kBAEA;IACA;MACAC,gBADA;MAEAC,SAFA;MAGAC,gBAHA;MAIAC,iBAJA;MAKAC,WACA;QAAAC;MAAA,CADA,EAEA;QAAAC;QAAAC;MAAA,CAFA,EAGA;QAAAD;QAAAC;MAAA,CAHA,EAIA;QAAAD;QAAAC;MAAA,CAJA,EAKA;QAAAC;MAAA,CALA,EAMA;QAAAH;MAAA,CANA,EAOA;QAAAC;QAAAC;MAAA,CAPA,EAQA;QAAAD;QAAAC;MAAA,CARA,EASA;QAAAC;MAAA,CATA,EAUA;QAAAH;MAAA,CAVA,EAWA;QAAAC;QAAAC;MAAA,CAXA,EAYA;QAAAC;MAAA,CAZA,EAaA;QAAAH;MAAA,CAbA,EAcA;QAAAC;QAAAC;MAAA,CAdA,EAeA;QAAAD;QAAAC;MAAA,CAfA,EAgBA;QAAAC;MAAA,CAhBA,EAiBA;QAAAH;MAAA,CAjBA,EAkBA;QAAAC;QAAAC;MAAA,CAlBA,EAmBA;QAAAD;QAAAC;MAAA,CAnBA,EAoBA;QAAAC;MAAA,CApBA,EAqBA;QAAAH;MAAA,CArBA,EAsBA;QAAAC;QAAAC;MAAA,CAtBA,EAuBA;QAAAD;QAAAC;MAAA,CAvBA,EAwBA;QAAAD;QAAAC;MAAA,CAxBA,EAyBA;QAAAD;QAAAC;MAAA,CAzBA,EA0BA;QAAAD;QAAAC;MAAA,CA1BA,EA2BA;QAAAD;QAAAC;MAAA,CA3BA,EA4BA;QAAAD;QAAAC;MAAA,CA5BA;IALA;EAoCA,CAvCA;EAwCAE;IACAN,UADA,sBACAO,GADA,EACA;MAAA;;MACA;QACAC;UAAA;QAAA;MACA;IACA;EALA,CAxCA;EA+CAC;IACAC,QADA,sBACA;MACA;QACAZ;MADA;MAGA;IACA;EANA,CA/CA;EAuDAa;IACAC,MADA,kBACAC,IADA,EACA;MACA;MACA;IACA;EAJA;AAvDA","names":["props","data","autoUpdate","taxes","ShowFiscal","isUpdating","tax_sarl","header","name","value","divider","watch","val","setTimeout","computed","postData","methods","remove","item"],"sourceRoot":"src/components/popup/popup","sources":["Fiscal.vue"],"sourcesContent":["<template>\n    <v-card\n      :loading=\"isUpdating\">\n      <v-row class=\"pa-2 pt-0\">\n        <v-card-title>Options fiscales</v-card-title>\n        <v-checkbox color=\"accent\" v-model=\"ShowFiscal\" readonly></v-checkbox>\n      </v-row>\n      <v-container v-if=\"ShowFiscal\">\n          <v-row>\n            <v-col>\n              <v-autocomplete\n                v-model=\"taxes\"\n                :disabled=\"isUpdating\"\n                :items=\"tax_sarl\"\n                chips\n                outlined\n                label=\"Options fiscales\"\n                item-text=\"name\"\n                item-value=\"value\"\n                multiple>\n                <template v-slot:selection=\"data\">\n                  <v-chip\n                    v-bind=\"data.attrs\"\n                    :input-value=\"data.selected\"\n                    close\n                    @click=\"data.select\"\n                    @click:close=\"remove(data.item)\">\n                    {{ data.item.name }}\n                  </v-chip>\n                </template>\n                <template v-slot:item=\"data\">\n                  <template v-if=\"typeof data.item !== 'object'\">\n                    <v-list-item-content v-text=\"data.item\"></v-list-item-content>\n                  </template>\n                  <template v-else>\n                    <v-list-item-content>\n                      <v-list-item-title v-html=\"data.item.name\"></v-list-item-title>\n                    </v-list-item-content>\n                  </template>\n                </template>\n            </v-autocomplete>\n            </v-col>\n          </v-row>\n        </v-container>\n    </v-card>\n  </template>\n\n<script>\n    export default {\n      props: ['company'],\n      data () {  \n        return {\n          autoUpdate: true,\n          taxes: [],\n          ShowFiscal: true,\n          isUpdating: false,\n          tax_sarl: [\n            { header: 'Impôt sur les sociétés' },\n            { name : 'Revenu foncier', value: 'Taxe_RevenuFoncier'},\n            { name: 'Réel simplifié (IS)', value : 'TaxCB_IS_ReelSimplifie'},\n            { name: 'Réel normal (IS)', value : 'TaxCB_IS_ReelNormal'},\n            { divider: true },\n            { header: 'Bénéfices Industriels et Commerciaux' },\n            { name: 'Réel simplifié (BIC)', value : 'Taxe_CB_BICReelSimplifie'},\n            { name: 'Réel normal (BIC)', value : 'Taxe_CB_BICReelNormal'},\n            { divider: true },\n            { header: 'Bénéfices Non Commerciaux' },\n            { name: 'Déclaration contrôlée (BNC)', value : 'Taxe_CB_BNCDeclaControle'},\n            { divider: true },\n            { header: 'Options particulières' },\n            { name: \"Assujettissement à l'IS\", value : 'Taxe_CB_OptionParticuliereIS'},\n            { name: 'Régime des sociétés de personnes', value : 'Taxe_CB_OptionParticuliereRSP'},\n            { divider: true },\n            { header: 'Si associé unique' },\n            { name: 'Spécial BNC (micro)', value : 'TaxCB_SARLAssoUnique_BNC'},\n            { name: 'Micro BIC', value : 'TaxCB_SARLAssoUnique_MicroBIC'},\n            { divider: true },\n            { header: 'TVA' },\n            { name: 'Franchise en base (TVA)', value : 'TVA_FranchiseBase'},\n            { name: 'Réel simplifié (TVA)', value : 'TVA_ReelSimplifie'},\n            { name: 'Mini-réel (TVA)', value : 'TVA_MiniReel'},\n            { name: 'Réel normal (TVA)', value : 'TVA_ReelNormal'},\n            { name: 'Opération imposables sur options (TVA)', value : 'Tax_ImposableSurOption'},\n            { name: 'Déclarations trimestrielles (TVA)', value : 'TVA_DepotTrimestre4k'},\n            { name: 'Option déclaration annuelle (TVA)', value : ''}\n          ],\n        }\n      },\n      watch: {\n        isUpdating (val) {\n          if (val) {\n            setTimeout(() => (this.isUpdating = false), 3000)\n          }\n        },\n      },\n      computed: {\n        postData() {\n            const data = {\n                taxes: this.taxes\n            };\n            return data;\n        },\n      },\n      methods: {\n        remove (item) {\n          const index = this.taxes.indexOf(item.name)\n          if (index >= 0) this.taxes.splice(index, 1)\n        },\n      },\n    }\n  </script>"]},"metadata":{},"sourceType":"module"}